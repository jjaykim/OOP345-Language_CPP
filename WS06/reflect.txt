//==============================================
// Name:           Jungjoo Kim
// Student Number: 162 641 195
// Email:          jkim594@myseneca.ca
// Section:        NAA
// Date:           July 9, 2021
// Workshop:       Workshop6
//==============================================

	Through this workshop, I was able to use and learn the main features of STL, which is the advantage of C++. Among them, the function I mainly used in this workshop is the container. I also used iterators and range-based for statements in some functions. Using these two, I could easily access the data in the container object I created. The difference between the two is that the component of the container can be changed when approached using iterators. However, access to a container using a range-based for statement can not alter the container's elements. (if I use reference I can change)

	I used vector container in Autoshop.h as "std::vector<Vehicle*> m_vehicles;" and declared type as pointer type in abstract class Vehicle. As a result, I was able to store the dynamically assigned Vehicle class. However, since the Vehicle class is an abstract class, dynamic assignment is not possible. Instead, I dynamically allocate and store Car classes that inherit Vehicle classes. Furthermore, I store the RaceCar class, which inherits the Car class, with dynamically allocated. I created the appropriate class objects according to the type, which I stored in a vector container and could be used until the application was terminated. However, when the application was terminated, I had to delete all classes of memory one by one in the container to avoid memory leaks. The reason is natural. I have to cancel the memory allocation because it is a dynamically generated class object and it was a vector container that stores it.

	First of all, I read the file line by line, and then I cut off the necessary information using a comma, and deleted the space. But the information I had been getting is not the type I am looking for, or there are cases when the file contains wrong data or no data. So I used try-catch in this workshop.Throw an error message and terminate the function if it was not the information I was looking for. It is very useful. Catch catches the message thrown when it encounters an error while proceeding with the function. It is important to note that the type of throw and catch must be the same. But if I do not use try-catch, I think I will use Boolean type. Assuming the default value is true, the function returns false if it encounters an error. If false is returned, it is likely that solution will be implemented by printing error messages. If the class is assigned dynamically because the type is correct, and an error occurs in the stage of finding condition or speed, a solution must be implemented to delete the generated object again.

	It is impossible to use the type of list and vector as <sdds::Vehicle> instead of <sdds::Vehicle*>. The reason is simple. The Vehicle class I use is an abstract class. This makes it impossible to create instance objects. That is why I use the pointer type as <sdds::Vehicle*>. This allows the creation of instance objects of derived classes inherited from the Vehicle class, and then stored them in a vector or list of Vehicle*types. Also, even if Vehicle class is not an abstract class, it is still impossible. Because there are more member variables defined in Car or RaceCar than Vehice, object slicing occurs when adding an instance of Car or Racecar to the vector of the Vehicle datatype.
